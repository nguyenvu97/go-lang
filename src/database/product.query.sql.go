// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.query.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO product (
    product_url,
    product_category,
    description,
    price,
    quantity,
    product_name,
    created_at,
    updated_at
) VALUES (
             ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
         )
`

type CreateProductParams struct {
	ProductUrl      string
	ProductCategory string
	Description     string
	Price           float64
	Quantity     int
	ProductName     string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ProductUrl,
		arg.ProductCategory,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.ProductName,
	)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT p.id, p.product_url, p.product_category, p.description, p.price, p.status, p.quantity, p.product_name, p.created_at, p.updated_at FROM product AS p WHERE p.id = ? LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductUrl,
		&i.ProductCategory,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.Quantity,
		&i.ProductName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductAllSQLC = `-- name: GetProductAllSQLC :many
SELECT p.id, p.product_url, p.product_category, p.description, p.price, p.status, p.quantity, p.product_name, p.created_at, p.updated_at
FROM product AS p
WHERE p.status = 1
    LIMIT ? OFFSET ?
`

type GetProductAllSQLCParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetProductAllSQLC(ctx context.Context, arg GetProductAllSQLCParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductAllSQLC, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductUrl,
			&i.ProductCategory,
			&i.Description,
			&i.Price,
			&i.Status,
			&i.Quantity,
			&i.ProductName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByNameSQLC = `-- name: GetProductByNameSQLC :one
SELECT p.id, p.product_url, p.product_category, p.description, p.price, p.status, p.quantity, p.product_name, p.created_at, p.updated_at FROM product AS p WHERE p.product_name = ? and p.status = 1 LIMIT 1
`

func (q *Queries) GetProductByNameSQLC(ctx context.Context, productName string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByNameSQLC, productName)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductUrl,
		&i.ProductCategory,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.Quantity,
		&i.ProductName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product
SET
    product_url = ?,
    product_category = ?,
    description = ?,
    price = ?,
    quantity = ?,
    product_name = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateProductParams struct {
	ProductUrl      string
	ProductCategory string
	Description     sql.NullString
	Price           string
	Quantity        sql.NullInt32
	ProductName     string
	ID              int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ProductUrl,
		arg.ProductCategory,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.ProductName,
		arg.ID,
	)
	return err
}

const deleteProduct = `-- name: deleteProduct :exec
update product set status = ?
`

func (q *Queries) deleteProduct(ctx context.Context, status int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, status)
	return err
}
