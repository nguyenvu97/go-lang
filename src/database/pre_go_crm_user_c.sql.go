// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pre_go_crm_user_c.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username, email, password_hash, created_at, updated_at
) VALUES (
             ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
         )
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (error, error) {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	return err, nil
}

const getUserByEmailSQLC = `-- name: GetUserByEmailSQLC :one
SELECT u.id, u.username, u.email, u.password_hash, u.created_at, u.updated_at FROM users AS u WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmailSQLC(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailSQLC, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $2,
    updated_at = $3
WHERE id = $1
`

func (q *Queries) UpdatePassword(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updatePassword)
	return err
}
